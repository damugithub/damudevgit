{
	"name": "POC_Dataflow2_two_flows",
	"properties": {
		"folder": {
			"name": "MB folder/oldfiles/DataLake POC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customers1",
						"type": "DatasetReference"
					},
					"name": "Sourcecustomers"
				},
				{
					"dataset": {
						"referenceName": "customers1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SqlServercustomertabletarget",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SqlServercustomertabletarget",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "AlterRow1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "MARITALSTATUS"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUST_ID as string,",
				"          CUST_FIRST_NAME as string,",
				"          CUST_LAST_NAME as string,",
				"          CUST_GENDER as string,",
				"          CUST_YEAR_OF_BIRTH as string,",
				"          CUST_MARITAL_STATUS as string,",
				"          CUST_STREET_ADDRESS as string,",
				"          CUST_POSTAL_CODE as string,",
				"          CUST_CITY as string,",
				"          CUST_CITY_ID as string,",
				"          CUST_STATE_PROVINCE as string,",
				"          CUST_STATE_PROVINCE_ID as string,",
				"          COUNTRY_ID as string,",
				"          CUST_MAIN_PHONE_NUMBER as string,",
				"          CUST_INCOME_LEVEL as string,",
				"          CUST_CREDIT_LIMIT as string,",
				"          CUST_EMAIL as string,",
				"          CUST_TOTAL as string,",
				"          CUST_TOTAL_ID as string,",
				"          CUST_SRC_ID as string,",
				"          CUST_EFF_FROM as string,",
				"          CUST_EFF_TO as string,",
				"          CUST_VALID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> Sourcecustomers",
				"source(output(",
				"          CUST_ID as string,",
				"          CUST_FIRST_NAME as string,",
				"          CUST_LAST_NAME as string,",
				"          CUST_GENDER as string,",
				"          CUST_YEAR_OF_BIRTH as string,",
				"          CUST_MARITAL_STATUS as string,",
				"          CUST_STREET_ADDRESS as string,",
				"          CUST_POSTAL_CODE as string,",
				"          CUST_CITY as string,",
				"          CUST_CITY_ID as string,",
				"          CUST_STATE_PROVINCE as string,",
				"          CUST_STATE_PROVINCE_ID as string,",
				"          COUNTRY_ID as string,",
				"          CUST_MAIN_PHONE_NUMBER as string,",
				"          CUST_INCOME_LEVEL as string,",
				"          CUST_CREDIT_LIMIT as string,",
				"          CUST_EMAIL as string,",
				"          CUST_TOTAL as string,",
				"          CUST_TOTAL_ID as string,",
				"          CUST_SRC_ID as string,",
				"          CUST_EFF_FROM as string,",
				"          CUST_EFF_TO as string,",
				"          CUST_VALID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
				"MARITALSTATUS derive(column1 = upper(CUST_FIRST_NAME)) ~> derivedColumn1",
				"Sourcecustomers filter(CUST_MARITAL_STATUS=='married') ~> MARITALSTATUS",
				"AlterRow1 aggregate(groupBy(CUST_FIRST_NAME,",
				"          CUST_ID,",
				"          CUST_LAST_NAME,",
				"          CUST_GENDER,",
				"          CUST_YEAR_OF_BIRTH,",
				"          CUST_VALID,",
				"          CUST_INCOME_LEVEL),",
				"     CUST_CREDIT_LIMIT = sum(toInteger(CUST_CREDIT_LIMIT))) ~> aggregate1",
				"aggregate1 sort(asc(CUST_FIRST_NAME, true),",
				"     asc(CUST_LAST_NAME, true),",
				"     asc(CUST_GENDER, true),",
				"     asc(CUST_VALID, true),",
				"     desc(CUST_INCOME_LEVEL, true),",
				"     asc(CUST_INCOME_LEVEL, true),",
				"     asc(CUST_ID, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUST_ID as integer,",
				"          CUST_FIRST_NAME as string,",
				"          CUST_LAST_NAME as string,",
				"          CUST_GENDER as string,",
				"          CUST_YEAR_OF_BIRTH as integer,",
				"          CUST_MARITAL_STATUS as string,",
				"          CUST_STREET_ADDRESS as string,",
				"          CUST_POSTAL_CODE as string,",
				"          CUST_CITY as string,",
				"          CUST_CITY_ID as integer,",
				"          CUST_STATE_PROVINCE as string,",
				"          CUST_STATE_PROVINCE_ID as integer,",
				"          COUNTRY_ID as integer,",
				"          CUST_MAIN_PHONE_INT as string,",
				"          CUST_INCOME_LEVEL as string,",
				"          CUST_CREDIT_LIMIT as integer,",
				"          CUST_EMAIL as string,",
				"          CUST_TOTAL as string,",
				"          CUST_TOTAL_ID as integer,",
				"          CUST_SRC_ID as integer,",
				"          CUST_EFF_FROM as date,",
				"          CUST_EFF_TO as date,",
				"          CUST_VALID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['CUST_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CUST_ID,",
				"          CUST_FIRST_NAME,",
				"          CUST_LAST_NAME,",
				"          CUST_GENDER,",
				"          CUST_INCOME_LEVEL,",
				"          CUST_CREDIT_LIMIT,",
				"          CUST_VALID",
				"     )) ~> sink1",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUST_ID as integer,",
				"          CUST_FIRST_NAME as string,",
				"          CUST_LAST_NAME as string,",
				"          CUST_GENDER as string,",
				"          CUST_YEAR_OF_BIRTH as integer,",
				"          CUST_MARITAL_STATUS as string,",
				"          CUST_STREET_ADDRESS as string,",
				"          CUST_POSTAL_CODE as string,",
				"          CUST_CITY as string,",
				"          CUST_CITY_ID as integer,",
				"          CUST_STATE_PROVINCE as string,",
				"          CUST_STATE_PROVINCE_ID as integer,",
				"          COUNTRY_ID as integer,",
				"          CUST_MAIN_PHONE_INT as string,",
				"          CUST_INCOME_LEVEL as string,",
				"          CUST_CREDIT_LIMIT as integer,",
				"          CUST_EMAIL as string,",
				"          CUST_TOTAL as string,",
				"          CUST_TOTAL_ID as integer,",
				"          CUST_SRC_ID as integer,",
				"          CUST_EFF_FROM as date,",
				"          CUST_EFF_TO as date,",
				"          CUST_VALID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}